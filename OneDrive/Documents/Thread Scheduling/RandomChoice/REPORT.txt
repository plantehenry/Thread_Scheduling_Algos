* Can you come up with a way that guarantees that dynamically allocated
  objects like Ide, Ext2, and Node will be deleted when all usable 
  pointers to them disappear (go out of scope or point to something
  else)?
  garbage collection. Dynamically allocated objects have a counter that 
  says how many things point to them. When it goes out of scope or things stop
  pointing to them the counter decrements. When the counter is 0 the object can be deleted 
  bevaiuse it no longer has anything pointing to it.
  Either imitiatly or by some other process that looks for things with counters at 0.

* How many sectors are read while running t0?
  during the initialization of root the BGDT is read (in my inplementation I read a block (2 sectors))
  in additon the super block is read 1 block -> (2 sectors)
  4

  each time fs->find() one blcok is read
  so you can find whats inside the directory (2 secotrs)
  in addition another sector is read to get the inode (1 sector)
  this happens 13 times
  3 * 13  = 39

  everytime show is called on a dir a block is read to  travserse
  and count entries  (2 sectors) * 4
  8

  everytime show is called on a file with true a block is read (2times * 2 secotrs = 4)
  in the case of the file call to panic two sectors are read (2 * 2 = 4)
  when reading fortunes read a sector 52 time -> assuming no caching this will read a block 52 times
  so 104 sectors. 
  we read a block from data.txt 12 times so (24 sectors)
  104 + 24 + 4 + 4 = 136

  total = 136 + 8 + 39 + 4 = 187




* Read about journaled file systems and log structured file systems and
  explain why we have them
  We have journaled file systems and log structured file systems to deal with
  inconsistencies that migth occer if the file system is not able to finish what it is woking on
  do to something like a power outage or someone taking the disk out of the computer.
  The journaled file system creates a jounal of all the things it is going to do.
  Whenever the system is going to go someting to the file stystem it will first say that it is
  going to do that. Then when it has finished that task it will "cross out" that journal entry.
  When the something happens like the disk getting pulled and the disk ends up in an inconsistent 
  state, when mounting the system will look at the journal to see what tasks the system was  trying to  
  do  before it got disconnected then it will fininsh those tasks and get the disk into a consistent state.
  A log structure file system is different. An array will be loaded into memory that. The array holds things
  that points to where that block is on the disk. For example index 10 will point to where block 10 is.
  When somone wants to change the contents of block 10, the next avaiable block on the disk is used and the 
  altered contents of block ten are put in there. The array also changed what is stored at index 10 to point to that
  new block. The onld block ten is still on the disk and is not deleted. Every once in awhile the array in memeory will
  be written back onto the disk. This saves the most recent consistent state. The position of the most recent 
  array write back to memeory is also saved in the super block. This array stores the state of the file system
  at a point in time. If the disk every gets disconnected, when it remounts it will load the last saved
  array into memeory and that will be the state of the file system - it will always be consistent. Yes, you lose any 
  changes you made after the last saved array but hopefully it wont be too many. 

* Why do we need both hard links and symbolic links?
  Symbolic links allow you to link to another directory without worrying
  about infinite recursion when looking through the directory tree structure
  they also allow directories to point to things in different disk.
  Hard links dont allow for these things, but hard links allow you to 
  count the number of things that point to you so you know if you
  should be deleted or not. Hard links allow multiple things to point
  to a file. Hard links also allow files to be called by different names.
